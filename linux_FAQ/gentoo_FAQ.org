#+title:gentoo使用FAQ
#+email:goodaniu@163.com
#+options: \n:t num:t toc:t
#+startup:indent

* gentoo
这是一个简单的笔记，很多都是我自己使用过程中遇见的问题，经常要搜索解决方案，看官方wiki:https://wiki.gentoo.org/wiki/Main_Page

** 同帐户下不同终端通信
#+BEGIN_SRC bash
   echo "hello,world" >/dev/pts/3   
#+END_SRC

** 挂载ISO，squashfs文件
#+BEGIN_SRC bash
sudo mount –o loop linuxsetup.iso /mnt/iso
sudo mount -o loop image.squashfs /mnt/squashfs
mksquashfs ~/test test.squashfs
#+END_SRC

** 制作一个启动U盘
#+BEGIN_SRC bash
sudo dd bs=4M if=/home/spark/download/archlinux-2017.04.01-x86_64.iso of=/dev/sdb status=progress && sync
#+END_SRC
一定要用 /dev/sdb 而不是 /dev/sdb1 ，否则会不能启动的。

** 如何升级完整地升级 @gentoo
Gentoo 升级系统
#+BEGIN_SRC bash
emerge --sync      //升级整个portage目录
emerge python     //如果不是最新的python，需要按提示执行此操作
/usr/sbin/update-python     //执行完emerge python后执行此操作
emerge -avukDN world      //按照 /var/lib/portage/world 文件下的包，重新构建整个系统
emerge -avukDN --with-bdeps=y @world 
emerge -av --depclean     //清除不需要（孤立）的软件包
revdep-rebuild     //gentoolkit包里面的一个软件，用来检查系统的依赖关系是否都满足，
etc-update && env-update
dispatch-conf     //更新系统的配置文件
emerge -e world     //本地重新编译整个系统，USE标记变化不大时不需执行
eclean -d distfiles  //清理下载的旧的源码包
#+END_SRC

** 调节屏幕亮度
#+BEGIN_SRC bash
sudo vim /sys/class/backlight/acpi_video0/brightness
#+END_SRC

** 添加irssi频道
#+BEGIN_SRC bash
/server add -auto -network freenode chat.freenode.net	#自动加入服务器
/channel add -auto #archlinux-cn freenode			#自动加入频道
/connect Freenode								#连接服务器
/network add -nick YOURNICKNAME Freenode			#注册用户名
/msg NickServ identify YOUR_PASSWORD				#验证密码
/wc											#离开频道
/quit											#退出irssi
/ignore * joins	parts quits nicks					#屏蔽进入/退出等提示
/save
#+END_SRC

** 安装oh-my-zsh
#+BEGIN_SRC bash
sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - )"
wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
#+END_SRC
二者选一即可

** Gentoo:回归到portage稳定分支
个人觉得~挺好，没这个必要，但是实在想的话：

改make.conf(amd64,x86之类):
#+BEGIN_SRC bash 
sed "s/\(ACCEPT_KEYWORDS=\"\)~/\1/g" /etc/make.conf > /etc/make.conf
#+END_SRC
备份package.keywords:
#+BEGIN_SRC bash
cp /etc/portage/package.keywords /etc/portage/package.keywords.back
#+END_SRC
合法化现存unstable分支的包包：
#+BEGIN_SRC bash
equery -i -N list | grep \~ | sed 's/.* \(.*\) (.*/> /etc/portage/package.keywords
#+END_SRC
因为新版本的原因，equery已经不支持i这个参数了
#+BEGIN_SRC bash
equery -N list -F '=$cpv $mask2' '*' | grep \~ > testpackages 
#+END_SRC
这样一来，系统将会在一次次的emerge -uDN world 中慢慢趋于稳定分支…

** 快速发送邮件
#+BEGIN_SRC bash
echo "测试test" | mutt -s "test" goodaniu@163.com
#+END_SRC
直接发送，不会打开vim和邮件发送客户端
#+BEGIN_SRC bash
mutt goodaniu@163.com -s 'test send mail'
#+END_SRC
会打开vim编辑器和邮件客户端，需要手工输入一些控制命令

** rsync备份文件
#+BEGIN_SRC bash
sudo rsync -az --delete /etc/ /home/spark/document/backup/etc.bak/
#+END_SRC

** 调节cpu频率
#+BEGIN_SRC bash
cpupower frequency-set -g governor
#+END_SRC
这里的governor,可以用ondemand，performance,conservative,powersave,userspace

建议用conservative和powersave
#+BEGIN_SRC bash
sudo cpupower frequency-set -g conservative
sudo cpupower frequency-info
sudo cpupower frequency-set -u 1.5GHz
#+END_SRC

** urxvt,emacs中文字体变方框的问题
应该是xft的梗，因为emacs的中文显示也不正常

也许可以试试：emerge urxvtconfig urxvt-perls urxvt-font-size

** gentoo,没有声音
有可能是默认静音，
#+BEGIN_SRC bash
amixer sset Master unmute
#+END_SRC

** vim 不同窗口之间的复制粘贴
首先选中要复制的文本，然后 "+y ，然后到要粘贴的地方 "+p

注意这个“＋”不能省略

上面是利用剪切板的，如果用缓冲区的话要用 "*y和 "*p（或者shift+insert)

** 抓图
1. 抓取桌面：scrot desktop.png，该命令将当前的整个桌面抓取下来，并保存为 desktop.png 文件。可以在当前的目录中找到此图像文件。
#+BEGIN_SRC bash
scrot desktop.png
#+END_SRC
2. 抓取窗口：scrot -bs window.png，选项 b 使 scrot 在抓取窗口时一同将外边框抓取下来，而 s 选项则让用户选择所要抓取的是何窗口。
#+BEGIN_SRC bash
scrot -bs window.png
#+END_SRC
3. 抓取区域：scrot -s rectangle.png，在执行此命令后，使用鼠标拖曳的矩形区域将被 scrot 抓取下来。
#+BEGIN_SRC bash
scrot -s rectangle.png
scrot -se 'mv $f ~/picture/ 2>/dev/null'
#+END_SRC

** 搜索文档内容
e.g. 在document目录中搜索含有内容"hello"的文件
#+BEGIN_SRC bash
sudo emerge the_silver_searcher
cd document
ag hello
#+END_SRC

** git常用命令
- workspace: 本地的工作目录。（记作A）
- index：缓存区域，临时保存本地改动。（记作B）
- local repository: 本地仓库，只想最后一次提交HEAD。（记作C）
- remote repository：远程仓库。（记作D）
#+BEGIN_SRC bash
1. 初始化
git init //创建
git clone /path/to/repository //检出
git config --global user.email "you@example.com" //配置email
git config --global user.name "Name" //配置用户名

2. 操作
git add <file> // 文件添加，A → B
git add . // 所有文件添加，A → B

git commit -m "代码提交信息" //文件提交，B → C
git commit --amend //与上次commit合并, *B → C

git push origin master //推送至master分支, C → D
git pull //更新本地仓库至最新改动， D → A
git fetch //抓取远程仓库更新， D → C

git log //查看提交记录
git status //查看修改状态
git diff//查看详细修改内容
git show//显示某次提交的内容

3. 撤销操作
git reset <file>//某个文件索引会回滚到最后一次提交， C → B
git reset//索引会回滚到最后一次提交， C → B
git reset --hard // 索引会回滚到最后一次提交， C → B → A

git checkout // 从index复制到workspace， B → A
git checkout -- files // 文件从index复制到workspace， B → A
git checkout HEAD -- files // 文件从local repository复制到workspace， C → A

4. 分支相关
git checkout -b branch_name //创建名叫“branch_name”的分支，并切换过去
git checkout master //切换回主分支
git branch -d branch_name // 删除名叫“branch_name”的分支
git push origin branch_name //推送分支到远端仓库
git merge branch_name // 合并分支branch_name到当前分支(如master)
git rebase //衍合，线性化的自动， D → A

5. 冲突处理
git diff //对比workspace与index
git diff HEAD //对于workspace与最后一次commit
git diff <source_branch> <target_branch> //对比差异
git add <filename> //修改完冲突，需要add以标记合并成功

6. 其他
gitk //开灯图形化git
git config color.ui true //彩色的 git 输出
git config format.pretty oneline //显示历史记录时，每个提交的信息只显示一行
git add -i //交互式添加文件到暂存区

#+END_SRC

** chrome不能输入中文
#+BEGIN_SRC bash
ibus-daemon -drx
#+END_SRC

** chrome浏览器插件：cvim修改搜索引擎
打开cvim选项，在cvimrc填写如下：
#+BEGIN_SRC bash
let searchengine baidu = "https://www.baidu.com/s?ie=UTF-8&wd=%s"
map a :tabnew baidu

let searchalias b = "baidu"  
let searchengine fy = "http://fanyi.baidu.com/#en/zh/%s"
let searchengine w = "https://zh.wikipedia.org/wiki/%s"
#+END_SRC
然后保存，刷新页面即可。
#+BEGIN_SRC bash
:set defaultengine = "baidu" #设置为默认,这一项似乎在cvimrc上不起作用
#+END_SRC

** qemu命令
#+BEGIN_SRC bash
- 创建镜像，如raw,qcow2,img
  qemu-img create -f raw test.raw 8G
  qemu-img create -f qcow2 test.img 10G
- 转换镜像格式，如从raw转为qcow2
  qemu-img convert -c -O qcow2 test.raw test.qcow2
- 安装系统
  qemu-system-x86_64 -m 512 -enable-kvm test.img -cdrom test.iso
- 启动
  qemu-system-x86_64 test.img
- 用kvm启动
  qemu-system-x86_64 -m 512 -enable-kvm test.img
#+END_SRC
